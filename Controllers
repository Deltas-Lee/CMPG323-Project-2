------------------------------------------------------------------------------
AccountController
----------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using ORGANISATION_X.Models;

namespace ORGANISATION_X.Controllers
{
    public class AccountController : Controller
    {
        private readonly OrganisationxDBContext AppUser;

        public AccountController(OrganisationxDBContext user)
        {
            AppUser = user;
        }
        public IActionResult Index()
        {
            return View();
        }
        public IActionResult Register()
        {
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult Register(LoginModel reg)
        {
            AppUser.Add(reg);
            AppUser.SaveChanges();
            ViewBag.message = "You have successfully created an account, please use your Username and Password to login";
            return View();
        }
    }
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------
RoleController
----------------------------------------------------------------------------
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;

namespace ORGANISATION_X.Controllers
{
    public class RoleController : Controller
    {
        readonly RoleManager<IdentityRole> roleManager;
        public RoleController(RoleManager<IdentityRole> roleManager)
        {
            this.roleManager = roleManager;
        }
        [Authorize(Policy = "readonlypolicy")]
        public IActionResult Index()
        {
            var role = roleManager.Roles.ToList();
            return View(role);
        }
        //[Authorize(Policy = "readonlypolicy")]
        public IActionResult Create()
        {
            return View(new IdentityRole());
        }
        [HttpPost]
        //[Authorize(Policy = "readonlypolicy")]
        public async Task<IActionResult> Create(IdentityRole role)
        {
            await roleManager.CreateAsync(role);
            return RedirectToAction("Index");
        }

    }
}



-----------------------------------------------------------------------------
Employees/ Cmpg323 dataset
----------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using ORGANISATION_X.Models;

namespace ORGANISATION_X.Controllers
{
    public class Cmpg323Project2DatasetController : Controller
    {
        private readonly OrganisationxDBContext _context;

        public Cmpg323Project2DatasetController(OrganisationxDBContext context)
        {
            _context = context;
        }

        // GET: Cmpg323Project2Dataset
        [Authorize(Policy = "writepolicy")]
        public async Task<IActionResult> Index()
        {
            return View(await _context.Cmpg323Project2Dataset.ToListAsync());
        }
        [HttpGet]
        [Authorize(Policy = "writepolicy")]
        public async Task<IActionResult> Index(string searchFunction)
        {
            ViewData["GetEmployeeDetails"] = searchFunction;
            var sqlQuery = from x in _context.Cmpg323Project2Dataset select x;

            if(!string.IsNullOrEmpty(searchFunction))
            {
                sqlQuery = sqlQuery.Where(x => x.EmployeeNumber.Contains(searchFunction) || x.Department.Contains(searchFunction));
            }
            return View(await sqlQuery.AsNoTracking().ToListAsync());


        }

        // GET: Cmpg323Project2Dataset/Details/5
        public async Task<IActionResult> Details(string id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var cmpg323Project2Dataset = await _context.Cmpg323Project2Dataset
                .FirstOrDefaultAsync(m => m.EmployeeNumber == id);
            if (cmpg323Project2Dataset == null)
            {
                return NotFound();
            }

            return View(cmpg323Project2Dataset);
        }

        // GET: Cmpg323Project2Dataset/Create
        public IActionResult Create(int  EmployeeNumber = 0)
        {
            if (EmployeeNumber  == 0)
                return View(new Cmpg323Project2Dataset());
            else
                return View(_context.Cmpg323Project2Dataset.Find(EmployeeNumber));
        }

        // POST: Cmpg323Project2Dataset/Create
        // To protect from overposting attacks, enable the specific properties you want to bind to, for 
        // more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("Age,Attrition,BusinessTravel,DailyRate,Department,DistanceFromHome,Education,EducationField,EmployeeCount,EmployeeNumber,EnvironmentSatisfaction,Gender,HourlyRate,JobInvolvement,JobLevel,JobRole,JobSatisfaction,MaritalStatus,MonthlyIncome,MonthlyRate,NumCompaniesWorked,Over18,OverTime,PercentSalaryHike,PerformanceRating,RelationshipSatisfaction,StandardHours,StockOptionLevel,TotalWorkingYears,TrainingTimesLastYear,WorkLifeBalance,YearsAtCompany,YearsInCurrentRole,YearsSinceLastPromotion,YearsWithCurrManager")] Cmpg323Project2Dataset cmpg323Project2Dataset)
        {
            if (ModelState.IsValid)
            {
                _context.Add(cmpg323Project2Dataset);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            return View(cmpg323Project2Dataset);
        }

        // GET: Cmpg323Project2Dataset/Edit/5
        public async Task<IActionResult> Edit(string id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var cmpg323Project2Dataset = await _context.Cmpg323Project2Dataset.FindAsync(id);
            if (cmpg323Project2Dataset == null)
            {
                return NotFound();
            }
            return View(cmpg323Project2Dataset);
        }

        // POST: Cmpg323Project2Dataset/Edit/5
        // To protect from overposting attacks, enable the specific properties you want to bind to, for 
        // more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(string id, [Bind("Age,Attrition,BusinessTravel,DailyRate,Department,DistanceFromHome,Education,EducationField,EmployeeCount,EmployeeNumber,EnvironmentSatisfaction,Gender,HourlyRate,JobInvolvement,JobLevel,JobRole,JobSatisfaction,MaritalStatus,MonthlyIncome,MonthlyRate,NumCompaniesWorked,Over18,OverTime,PercentSalaryHike,PerformanceRating,RelationshipSatisfaction,StandardHours,StockOptionLevel,TotalWorkingYears,TrainingTimesLastYear,WorkLifeBalance,YearsAtCompany,YearsInCurrentRole,YearsSinceLastPromotion,YearsWithCurrManager")] Cmpg323Project2Dataset cmpg323Project2Dataset)
        {
            if (id != cmpg323Project2Dataset.EmployeeNumber)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                try
                {
                    _context.Update(cmpg323Project2Dataset);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!Cmpg323Project2DatasetExists(cmpg323Project2Dataset.EmployeeNumber))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return RedirectToAction(nameof(Index));
            }
            return View(cmpg323Project2Dataset);
        }

        // GET: Cmpg323Project2Dataset/Delete/5
        public async Task<IActionResult> Delete(string id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var cmpg323Project2Dataset = await _context.Cmpg323Project2Dataset
                .FirstOrDefaultAsync(m => m.EmployeeNumber == id);
            if (cmpg323Project2Dataset == null)
            {
                return NotFound();
            }

            return View(cmpg323Project2Dataset);
        }

        // POST: Cmpg323Project2Dataset/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(string id)
        {
            var cmpg323Project2Dataset = await _context.Cmpg323Project2Dataset.FindAsync(id);
            _context.Cmpg323Project2Dataset.Remove(cmpg323Project2Dataset);
            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Index));
        }

        private bool Cmpg323Project2DatasetExists(string id)
        {
            return _context.Cmpg323Project2Dataset.Any(e => e.EmployeeNumber == id);
        }
    }
}


----------------------------------------------------------------------------
HomeController
---------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using ORGANISATION_X.Models;

namespace ORGANISATION_X.Controllers
{
    public class HomeController : Controller
    {
        private readonly ILogger<HomeController> _logger;

        public HomeController(ILogger<HomeController> logger)
        {
            _logger = logger;
        }

        public IActionResult Index()
        {
            return View();
        }

        public IActionResult Privacy()
        {
            return View();
        }

        [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
        public IActionResult Error()
        {
            return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
        }
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


