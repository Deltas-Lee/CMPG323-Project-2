Asp.NetUsert
using System;
using System.Collections.Generic;

namespace ORGANISATION_X.Models
{
    public partial class AspNetUsers
    {
        public AspNetUsers()
        {
            AspNetUserClaims = new HashSet<AspNetUserClaims>();
            AspNetUserLogins = new HashSet<AspNetUserLogins>();
            AspNetUserRoles = new HashSet<AspNetUserRoles>();
            AspNetUserTokens = new HashSet<AspNetUserTokens>();
        }

        public string Id { get; set; }
        public string UserName { get; set; }
        public string NormalizedUserName { get; set; }
        public string Email { get; set; }
        public string NormalizedEmail { get; set; }
        public bool EmailConfirmed { get; set; }
        public string PasswordHash { get; set; }
        public string SecurityStamp { get; set; }
        public string ConcurrencyStamp { get; set; }
        public string PhoneNumber { get; set; }
        public bool PhoneNumberConfirmed { get; set; }
        public bool TwoFactorEnabled { get; set; }
        public DateTimeOffset? LockoutEnd { get; set; }
        public bool LockoutEnabled { get; set; }
        public int AccessFailedCount { get; set; }

        public virtual ICollection<AspNetUserClaims> AspNetUserClaims { get; set; }
        public virtual ICollection<AspNetUserLogins> AspNetUserLogins { get; set; }
        public virtual ICollection<AspNetUserRoles> AspNetUserRoles { get; set; }
        public virtual ICollection<AspNetUserTokens> AspNetUserTokens { get; set; }
    }
}
-------------------------------------------------------------------------------------------------
Cmpg323DataSet Model

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;


namespace ORGANISATION_X.Models
{
    public partial class Cmpg323Project2Dataset
    {
        public int? Age { get; set; }

        public string Attrition { get; set; }

        [DisplayName("Business Travel")]
        public string BusinessTravel { get; set; }

        [DisplayName("Daily Rate")] 
        public int? DailyRate { get; set; }

        public string Department { get; set; }

        [Required(ErrorMessage = "This field is required")]
        
        [DisplayName("Distance From Home")]
        public int? DistanceFromHome { get; set; }


        public int? Education { get; set; }

        [DisplayName("Education Field")] 
        public string EducationField { get; set; }

        [DisplayName("Employee Count")] 
        public bool? EmployeeCount { get; set; }

        [Required(ErrorMessage = "Employee Number is required.")]
        [DisplayName("Employee Number")]
        public string EmployeeNumber { get; set; }

        [DisplayName("Environment Satisfaction")] 
        public int? EnvironmentSatisfaction { get; set; }

        public string Gender { get; set; }

        [DisplayName("Hourly Rate")] 
        public int? HourlyRate { get; set; }

        [DisplayName("Job Involvement")] 
        public int? JobInvolvement { get; set; }

        [DisplayName("Job Level")] 
        public int? JobLevel { get; set; }

        [DisplayName("Job Role")] 
        public string JobRole { get; set; }

        [DisplayName("Job Satisifaction")] 
        public int? JobSatisfaction { get; set; }

        [DisplayName("Marital Status")] 
        public string MaritalStatus { get; set; }

        [Required(ErrorMessage = "Monthly Income is required")]
        
        [DisplayName("Monthly Income")] 
        public int? MonthlyIncome { get; set; }

        [DisplayName("Monthly Rate")] 
        public int? MonthlyRate { get; set; }

        [DisplayName("Num. Companies Worked")] 
        public int? NumCompaniesWorked { get; set; }

        [Required(ErrorMessage = "This field is required")]
        [DisplayName("Over 18")] 
        public string Over18 { get; set; }

        [DisplayName("Over Time")] 
        public string OverTime { get; set; }

        [DisplayName("Percent Salary Hike")] 
        public int? PercentSalaryHike { get; set; }

        [DisplayName("Performance Rating")] 
        public int? PerformanceRating { get; set; }

        [DisplayName("Relationship Satisfaction")] 
        public int? RelationshipSatisfaction { get; set; }

        [DisplayName("Standard Hours")] 
        public int? StandardHours { get; set; }

        [DisplayName("Stock Option Level")] 
        public int? StockOptionLevel { get; set; }

        [Required(ErrorMessage = "Total Working Years is required")]
        [DisplayName("Total Working Years")] 
        public int? TotalWorkingYears { get; set; }

        [DisplayName("Training Times Last Year")] 
        public int? TrainingTimesLastYear { get; set; }


        [DisplayName("Working Life Balance")] 
        public int? WorkLifeBalance { get; set; }

        [Required(ErrorMessage = "Years At Company is required")]
        [DisplayName("Years At Company")] 
        public int? YearsAtCompany { get; set; }

        [DisplayName("Years In Current Role")] 
        public int? YearsInCurrentRole { get; set; }

        [DisplayName("Years Since Last Promotion")] 
        public int? YearsSinceLastPromotion { get; set; }
        
        [DisplayName("Years With Current Manager")] 
        public int? YearsWithCurrManager { get; set; }

    }
}

-----------------------------------------------------------------------------------------------
Database DbContext

using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace ORGANISATION_X.Models
{
    public partial class OrganisationxDBContext : DbContext
    {
        public OrganisationxDBContext()
        {
        }

        public OrganisationxDBContext(DbContextOptions<OrganisationxDBContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AspNetRoleClaims> AspNetRoleClaims { get; set; }
        public virtual DbSet<AspNetRoles> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaims> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogins> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUserRoles> AspNetUserRoles { get; set; }
        public virtual DbSet<AspNetUserTokens> AspNetUserTokens { get; set; }
        public virtual DbSet<AspNetUsers> AspNetUsers { get; set; }
        public virtual DbSet<Cmpg323Project2Dataset> Cmpg323Project2Dataset { get; set; }
        public virtual DbSet<EmployeeModel> EmployeeModel { get; set; }
        public virtual DbSet<LoginModel> LoginModel { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#pragma warning disable CS1030 // #warning directive
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. See http://go.microsoft.com/fwlink/?LinkId=723263 for guidance on storing connection strings.
                optionsBuilder.UseSqlServer("Server=USERPC-PC\\SQLEXPRESS;Database=OrganisationxDB;Trusted_Connection=True;");
#pragma warning restore CS1030 // #warning directive
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AspNetRoleClaims>(entity =>
            {
                entity.HasIndex(e => e.RoleId);

                entity.Property(e => e.RoleId).IsRequired();

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.AspNetRoleClaims)
                    .HasForeignKey(d => d.RoleId);
            });

            modelBuilder.Entity<AspNetRoles>(entity =>
            {
                entity.HasIndex(e => e.NormalizedName)
                    .HasName("RoleNameIndex")
                    .IsUnique()
                    .HasFilter("([NormalizedName] IS NOT NULL)");

                entity.Property(e => e.Name).HasMaxLength(256);

                entity.Property(e => e.NormalizedName).HasMaxLength(256);
            });

            modelBuilder.Entity<AspNetUserClaims>(entity =>
            {
                entity.HasIndex(e => e.UserId);

                entity.Property(e => e.UserId).IsRequired();

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspNetUserClaims)
                    .HasForeignKey(d => d.UserId);
            });

            modelBuilder.Entity<AspNetUserLogins>(entity =>
            {
                entity.HasKey(e => new { e.LoginProvider, e.ProviderKey });

                entity.HasIndex(e => e.UserId);

                entity.Property(e => e.LoginProvider).HasMaxLength(128);

                entity.Property(e => e.ProviderKey).HasMaxLength(128);

                entity.Property(e => e.UserId).IsRequired();

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspNetUserLogins)
                    .HasForeignKey(d => d.UserId);
            });

            modelBuilder.Entity<AspNetUserRoles>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.RoleId });

                entity.HasIndex(e => e.RoleId);

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.AspNetUserRoles)
                    .HasForeignKey(d => d.RoleId);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspNetUserRoles)
                    .HasForeignKey(d => d.UserId);
            });

            modelBuilder.Entity<AspNetUserTokens>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.LoginProvider, e.Name });

                entity.Property(e => e.LoginProvider).HasMaxLength(128);

                entity.Property(e => e.Name).HasMaxLength(128);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspNetUserTokens)
                    .HasForeignKey(d => d.UserId);
            });

            modelBuilder.Entity<AspNetUsers>(entity =>
            {
                entity.HasIndex(e => e.NormalizedEmail)
                    .HasName("EmailIndex");

                entity.HasIndex(e => e.NormalizedUserName)
                    .HasName("UserNameIndex")
                    .IsUnique()
                    .HasFilter("([NormalizedUserName] IS NOT NULL)");

                entity.Property(e => e.Email).HasMaxLength(256);

                entity.Property(e => e.NormalizedEmail).HasMaxLength(256);

                entity.Property(e => e.NormalizedUserName).HasMaxLength(256);

                entity.Property(e => e.UserName).HasMaxLength(256);
            });

            modelBuilder.Entity<Cmpg323Project2Dataset>(entity =>
            {
                entity.HasKey(e => e.EmployeeNumber)
                    .HasName("PK__CMPG323___8D663599476A99D0");

                entity.ToTable("CMPG323_project_2_dataset");

                entity.Property(e => e.EmployeeNumber)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Attrition)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.BusinessTravel)
                    .HasMaxLength(17)
                    .IsUnicode(false);

                entity.Property(e => e.Department)
                    .HasMaxLength(22)
                    .IsUnicode(false);

                entity.Property(e => e.EducationField)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Gender)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.JobRole)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.MaritalStatus)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Over18)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.OverTime)
                    .HasMaxLength(3)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EmployeeModel>(entity =>
            {
                entity.HasKey(e => e.EmployeeNumber)
                    .HasName("PK__Employee__8D6635994F70AA23");

                entity.Property(e => e.EmployeeNumber)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Attrition)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.BusinessTravel)
                    .HasMaxLength(17)
                    .IsUnicode(false);

                entity.Property(e => e.Department)
                    .HasMaxLength(22)
                    .IsUnicode(false);

                entity.Property(e => e.EducationField)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Gender)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.JobRole)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.MaritalStatus)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Over18)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.OverTime)
                    .HasMaxLength(3)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LoginModel>(entity =>
            {
                entity.HasKey(e => e.Username);

                entity.Property(e => e.Username)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Password)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}

